// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chain/chain.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Chain struct {
	Creator               string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index                 string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	SourceChainID         int32  `protobuf:"varint,3,opt,name=sourceChainID,proto3" json:"sourceChainID,omitempty"`
	Height                int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Proof                 string `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	ProxyAddress          string `protobuf:"bytes,6,opt,name=proxyAddress,proto3" json:"proxyAddress,omitempty"`
	Extra                 string `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
	HeaderOrCrossChainMsg string `protobuf:"bytes,8,opt,name=headerOrCrossChainMsg,proto3" json:"headerOrCrossChainMsg,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_a51e95a6c5291f2c, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Chain) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Chain) GetSourceChainID() int32 {
	if m != nil {
		return m.SourceChainID
	}
	return 0
}

func (m *Chain) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Chain) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

func (m *Chain) GetProxyAddress() string {
	if m != nil {
		return m.ProxyAddress
	}
	return ""
}

func (m *Chain) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *Chain) GetHeaderOrCrossChainMsg() string {
	if m != nil {
		return m.HeaderOrCrossChainMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*Chain)(nil), "pchainorg.pibridge.chain.Chain")
}

func init() { proto.RegisterFile("chain/chain.proto", fileDescriptor_a51e95a6c5291f2c) }

var fileDescriptor_a51e95a6c5291f2c = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbf, 0x4e, 0xeb, 0x30,
	0x14, 0xc6, 0xeb, 0x7b, 0x49, 0x0b, 0x16, 0x0c, 0x58, 0x05, 0x59, 0x0c, 0x56, 0x55, 0x31, 0x74,
	0x69, 0x3c, 0xc0, 0x0b, 0x40, 0x91, 0x10, 0x03, 0x42, 0xea, 0xc8, 0x96, 0x26, 0xc6, 0xf1, 0x40,
	0x8f, 0x75, 0xec, 0x4a, 0xe9, 0x5b, 0xf0, 0x58, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x18, 0x2c, 0x28,
	0xc7, 0x30, 0x54, 0x62, 0x89, 0xf2, 0xfb, 0xfe, 0x1c, 0x4b, 0x1f, 0x3f, 0x2d, 0xeb, 0xc2, 0xad,
	0x35, 0x7d, 0x73, 0x8f, 0x10, 0x41, 0x48, 0x4f, 0x04, 0x68, 0x73, 0xef, 0x56, 0xe8, 0x2a, 0x6b,
	0x72, 0x52, 0x2e, 0xc6, 0x16, 0x2c, 0x50, 0x48, 0xf7, 0x7f, 0x29, 0x3f, 0xfd, 0x62, 0x3c, 0x5b,
	0xf4, 0xbe, 0x90, 0x7c, 0x54, 0xa2, 0x29, 0x22, 0xa0, 0x64, 0x13, 0x36, 0x3b, 0x5a, 0xfe, 0xa2,
	0x18, 0xf3, 0xcc, 0xad, 0x2b, 0xd3, 0xc8, 0x7f, 0xa4, 0x27, 0x10, 0x97, 0xfc, 0x24, 0xc0, 0x06,
	0x4b, 0x43, 0xf5, 0x87, 0x3b, 0xf9, 0x7f, 0xc2, 0x66, 0xd9, 0x72, 0x5f, 0x14, 0xe7, 0x7c, 0x58,
	0x1b, 0x67, 0xeb, 0x28, 0x0f, 0xc8, 0xfe, 0xa1, 0xfe, 0xa6, 0x47, 0x80, 0x17, 0x99, 0xa5, 0x9b,
	0x04, 0x62, 0xca, 0x8f, 0x3d, 0x42, 0xb3, 0xbd, 0xa9, 0x2a, 0x34, 0x21, 0xc8, 0x21, 0x99, 0x7b,
	0x5a, 0xdf, 0x34, 0x4d, 0xc4, 0x42, 0x8e, 0x52, 0x93, 0x40, 0x5c, 0xf3, 0xb3, 0xda, 0x14, 0x95,
	0xc1, 0x27, 0x5c, 0x20, 0x84, 0x40, 0xef, 0x3f, 0x06, 0x2b, 0x0f, 0x29, 0xf5, 0xb7, 0x79, 0x7b,
	0xff, 0xde, 0x2a, 0xb6, 0x6b, 0x15, 0xfb, 0x6c, 0x15, 0x7b, 0xeb, 0xd4, 0x60, 0xd7, 0xa9, 0xc1,
	0x47, 0xa7, 0x06, 0xcf, 0x73, 0xeb, 0x62, 0xbd, 0x59, 0xe5, 0x25, 0xbc, 0xea, 0x34, 0xe9, 0x1c,
	0xd0, 0x6a, 0xef, 0xe6, 0x69, 0x54, 0xdd, 0xa4, 0xd9, 0x75, 0xdc, 0x7a, 0x13, 0x56, 0x43, 0x5a,
	0xf3, 0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xa4, 0x71, 0x4a, 0x92, 0x01, 0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeaderOrCrossChainMsg) > 0 {
		i -= len(m.HeaderOrCrossChainMsg)
		copy(dAtA[i:], m.HeaderOrCrossChainMsg)
		i = encodeVarintChain(dAtA, i, uint64(len(m.HeaderOrCrossChainMsg)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintChain(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProxyAddress) > 0 {
		i -= len(m.ProxyAddress)
		copy(dAtA[i:], m.ProxyAddress)
		i = encodeVarintChain(dAtA, i, uint64(len(m.ProxyAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintChain(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Height != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceChainID != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.SourceChainID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintChain(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintChain(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.SourceChainID != 0 {
		n += 1 + sovChain(uint64(m.SourceChainID))
	}
	if m.Height != 0 {
		n += 1 + sovChain(uint64(m.Height))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	l = len(m.ProxyAddress)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	l = len(m.HeaderOrCrossChainMsg)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func sovChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChain(x uint64) (n int) {
	return sovChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainID", wireType)
			}
			m.SourceChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderOrCrossChainMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderOrCrossChainMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChain = fmt.Errorf("proto: unexpected end of group")
)
