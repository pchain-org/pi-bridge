// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trx/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # proto/tx/message
type MsgCrossChainTransfer struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Asset       string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount      int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	FromChain   string `protobuf:"bytes,4,opt,name=fromChain,proto3" json:"fromChain,omitempty"`
	FromAddress string `protobuf:"bytes,5,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToChain     string `protobuf:"bytes,6,opt,name=toChain,proto3" json:"toChain,omitempty"`
	ToAddress   string `protobuf:"bytes,7,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
}

func (m *MsgCrossChainTransfer) Reset()         { *m = MsgCrossChainTransfer{} }
func (m *MsgCrossChainTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgCrossChainTransfer) ProtoMessage()    {}
func (*MsgCrossChainTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6438adb95980608, []int{0}
}
func (m *MsgCrossChainTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrossChainTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrossChainTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrossChainTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrossChainTransfer.Merge(m, src)
}
func (m *MsgCrossChainTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrossChainTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrossChainTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrossChainTransfer proto.InternalMessageInfo

func (m *MsgCrossChainTransfer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCrossChainTransfer) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *MsgCrossChainTransfer) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgCrossChainTransfer) GetFromChain() string {
	if m != nil {
		return m.FromChain
	}
	return ""
}

func (m *MsgCrossChainTransfer) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgCrossChainTransfer) GetToChain() string {
	if m != nil {
		return m.ToChain
	}
	return ""
}

func (m *MsgCrossChainTransfer) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

type MsgCrossChainTransferResponse struct {
}

func (m *MsgCrossChainTransferResponse) Reset()         { *m = MsgCrossChainTransferResponse{} }
func (m *MsgCrossChainTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCrossChainTransferResponse) ProtoMessage()    {}
func (*MsgCrossChainTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6438adb95980608, []int{1}
}
func (m *MsgCrossChainTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrossChainTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrossChainTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrossChainTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrossChainTransferResponse.Merge(m, src)
}
func (m *MsgCrossChainTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrossChainTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrossChainTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrossChainTransferResponse proto.InternalMessageInfo

type MsgCreateTrx struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index          string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ChainID        int32  `protobuf:"varint,3,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Address        string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	CrossChainMsgs string `protobuf:"bytes,5,opt,name=crossChainMsgs,proto3" json:"crossChainMsgs,omitempty"`
}

func (m *MsgCreateTrx) Reset()         { *m = MsgCreateTrx{} }
func (m *MsgCreateTrx) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTrx) ProtoMessage()    {}
func (*MsgCreateTrx) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6438adb95980608, []int{2}
}
func (m *MsgCreateTrx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTrx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTrx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTrx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTrx.Merge(m, src)
}
func (m *MsgCreateTrx) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTrx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTrx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTrx proto.InternalMessageInfo

func (m *MsgCreateTrx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTrx) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgCreateTrx) GetChainID() int32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *MsgCreateTrx) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgCreateTrx) GetCrossChainMsgs() string {
	if m != nil {
		return m.CrossChainMsgs
	}
	return ""
}

type MsgCreateTrxResponse struct {
}

func (m *MsgCreateTrxResponse) Reset()         { *m = MsgCreateTrxResponse{} }
func (m *MsgCreateTrxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTrxResponse) ProtoMessage()    {}
func (*MsgCreateTrxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6438adb95980608, []int{3}
}
func (m *MsgCreateTrxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTrxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTrxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTrxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTrxResponse.Merge(m, src)
}
func (m *MsgCreateTrxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTrxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTrxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTrxResponse proto.InternalMessageInfo

type MsgUpdateTrx struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index          string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ChainID        int32  `protobuf:"varint,3,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Address        string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	CrossChainMsgs string `protobuf:"bytes,5,opt,name=crossChainMsgs,proto3" json:"crossChainMsgs,omitempty"`
}

func (m *MsgUpdateTrx) Reset()         { *m = MsgUpdateTrx{} }
func (m *MsgUpdateTrx) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTrx) ProtoMessage()    {}
func (*MsgUpdateTrx) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6438adb95980608, []int{4}
}
func (m *MsgUpdateTrx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTrx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTrx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTrx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTrx.Merge(m, src)
}
func (m *MsgUpdateTrx) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTrx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTrx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTrx proto.InternalMessageInfo

func (m *MsgUpdateTrx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTrx) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MsgUpdateTrx) GetChainID() int32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *MsgUpdateTrx) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgUpdateTrx) GetCrossChainMsgs() string {
	if m != nil {
		return m.CrossChainMsgs
	}
	return ""
}

type MsgUpdateTrxResponse struct {
}

func (m *MsgUpdateTrxResponse) Reset()         { *m = MsgUpdateTrxResponse{} }
func (m *MsgUpdateTrxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTrxResponse) ProtoMessage()    {}
func (*MsgUpdateTrxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6438adb95980608, []int{5}
}
func (m *MsgUpdateTrxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTrxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTrxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTrxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTrxResponse.Merge(m, src)
}
func (m *MsgUpdateTrxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTrxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTrxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTrxResponse proto.InternalMessageInfo

type MsgDeleteTrx struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgDeleteTrx) Reset()         { *m = MsgDeleteTrx{} }
func (m *MsgDeleteTrx) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTrx) ProtoMessage()    {}
func (*MsgDeleteTrx) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6438adb95980608, []int{6}
}
func (m *MsgDeleteTrx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTrx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTrx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTrx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTrx.Merge(m, src)
}
func (m *MsgDeleteTrx) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTrx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTrx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTrx proto.InternalMessageInfo

func (m *MsgDeleteTrx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteTrx) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgDeleteTrxResponse struct {
}

func (m *MsgDeleteTrxResponse) Reset()         { *m = MsgDeleteTrxResponse{} }
func (m *MsgDeleteTrxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTrxResponse) ProtoMessage()    {}
func (*MsgDeleteTrxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6438adb95980608, []int{7}
}
func (m *MsgDeleteTrxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTrxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTrxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTrxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTrxResponse.Merge(m, src)
}
func (m *MsgDeleteTrxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTrxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTrxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTrxResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCrossChainTransfer)(nil), "pchainorg.pibridge.trx.MsgCrossChainTransfer")
	proto.RegisterType((*MsgCrossChainTransferResponse)(nil), "pchainorg.pibridge.trx.MsgCrossChainTransferResponse")
	proto.RegisterType((*MsgCreateTrx)(nil), "pchainorg.pibridge.trx.MsgCreateTrx")
	proto.RegisterType((*MsgCreateTrxResponse)(nil), "pchainorg.pibridge.trx.MsgCreateTrxResponse")
	proto.RegisterType((*MsgUpdateTrx)(nil), "pchainorg.pibridge.trx.MsgUpdateTrx")
	proto.RegisterType((*MsgUpdateTrxResponse)(nil), "pchainorg.pibridge.trx.MsgUpdateTrxResponse")
	proto.RegisterType((*MsgDeleteTrx)(nil), "pchainorg.pibridge.trx.MsgDeleteTrx")
	proto.RegisterType((*MsgDeleteTrxResponse)(nil), "pchainorg.pibridge.trx.MsgDeleteTrxResponse")
}

func init() { proto.RegisterFile("trx/tx.proto", fileDescriptor_a6438adb95980608) }

var fileDescriptor_a6438adb95980608 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x65, 0x3f, 0x3e, 0x20, 0xac, 0xe8, 0x61, 0x83, 0xa4, 0x21, 0x5a, 0x49, 0x63, 0x0c, 0x89,
	0xd2, 0x26, 0x1a, 0xaf, 0x26, 0x0a, 0x1e, 0x3c, 0x70, 0x21, 0x78, 0xf1, 0x62, 0x4a, 0xbb, 0x94,
	0x26, 0xd2, 0x6d, 0x76, 0x97, 0xa4, 0xfa, 0x2b, 0x3c, 0x7b, 0xf6, 0xc7, 0x78, 0xe4, 0xa6, 0x47,
	0x03, 0x7f, 0xc4, 0x74, 0xdb, 0x6d, 0x09, 0x34, 0x8d, 0x7a, 0xf2, 0xf8, 0xa6, 0x6f, 0xde, 0xbc,
	0x97, 0x99, 0x2e, 0xac, 0x71, 0x1a, 0x18, 0x3c, 0xd0, 0x7d, 0x4a, 0x38, 0x41, 0x0d, 0xdf, 0x9a,
	0x98, 0xae, 0x47, 0xa8, 0xa3, 0xfb, 0xee, 0x88, 0xba, 0xb6, 0x83, 0x75, 0x4e, 0x83, 0xe6, 0xb6,
	0x60, 0xd1, 0x98, 0xa6, 0xbd, 0x03, 0xb8, 0xdb, 0x67, 0x4e, 0x97, 0x12, 0xc6, 0xba, 0x61, 0xc3,
	0x90, 0x9a, 0x1e, 0x1b, 0x63, 0x8a, 0x14, 0x58, 0xb1, 0x28, 0x36, 0x39, 0xa1, 0x0a, 0x68, 0x81,
	0x76, 0x75, 0x20, 0x21, 0xaa, 0xc3, 0x92, 0xc9, 0x18, 0xe6, 0xca, 0x3f, 0x51, 0x8f, 0x00, 0x6a,
	0xc0, 0xb2, 0x39, 0x25, 0x33, 0x8f, 0x2b, 0xc5, 0x16, 0x68, 0x97, 0x06, 0x31, 0x42, 0x7b, 0xb0,
	0x3a, 0xa6, 0x64, 0x2a, 0xc4, 0x95, 0xff, 0xa2, 0x23, 0x2d, 0xa0, 0x16, 0xdc, 0x0a, 0xc1, 0xa5,
	0x6d, 0x53, 0xcc, 0x98, 0x52, 0x12, 0xdf, 0x57, 0x4b, 0xa1, 0x0f, 0x4e, 0xa2, 0xee, 0x72, 0xe4,
	0x23, 0x86, 0xa1, 0x32, 0x27, 0xb2, 0xb3, 0x12, 0x29, 0x27, 0x05, 0xed, 0x00, 0xee, 0x67, 0x06,
	0x1b, 0x60, 0xe6, 0x13, 0x8f, 0x61, 0xed, 0x05, 0xc0, 0x9a, 0x60, 0x60, 0x93, 0xe3, 0x21, 0x0d,
	0xf2, 0x13, 0xbb, 0x9e, 0x8d, 0x03, 0x99, 0x58, 0x00, 0xc1, 0x0f, 0x95, 0x6f, 0x7a, 0x71, 0x64,
	0x09, 0xc3, 0x2f, 0x66, 0xec, 0x2b, 0x4a, 0x2c, 0x21, 0x3a, 0x82, 0x3b, 0x56, 0x62, 0xa9, 0xcf,
	0x1c, 0x19, 0x79, 0xad, 0xaa, 0x35, 0x60, 0x7d, 0xd5, 0xdb, 0xba, 0xe9, 0x5b, 0xdf, 0xfe, 0xb3,
	0xa6, 0x13, 0x6f, 0x89, 0xe9, 0x0b, 0xe1, 0xb9, 0x87, 0x1f, 0xf0, 0xaf, 0x3c, 0xc7, 0xba, 0x49,
	0xbf, 0xd4, 0x3d, 0x7d, 0x2d, 0xc2, 0x62, 0x9f, 0x39, 0xe8, 0x09, 0xa2, 0x8c, 0x03, 0xee, 0xe8,
	0xd9, 0xbf, 0x80, 0x9e, 0x79, 0x16, 0xcd, 0xf3, 0x1f, 0xd1, 0xa5, 0x07, 0x74, 0x0f, 0xab, 0xe9,
	0x05, 0x1d, 0xe6, 0x6a, 0xc4, 0xac, 0xe6, 0xc9, 0x77, 0x58, 0xab, 0x03, 0xd2, 0x6d, 0xe7, 0x0d,
	0x48, 0x58, 0xb9, 0x03, 0x36, 0xb6, 0x13, 0x0e, 0x48, 0x57, 0x93, 0x37, 0x20, 0x61, 0xe5, 0x0e,
	0xd8, 0x58, 0xd3, 0xd5, 0xf5, 0xdb, 0x42, 0x05, 0xf3, 0x85, 0x0a, 0x3e, 0x17, 0x2a, 0x78, 0x5e,
	0xaa, 0x85, 0xf9, 0x52, 0x2d, 0x7c, 0x2c, 0xd5, 0xc2, 0xdd, 0xb1, 0xe3, 0xf2, 0xc9, 0x6c, 0xa4,
	0x5b, 0x64, 0x6a, 0x44, 0x8a, 0x1d, 0x42, 0x1d, 0xc3, 0x77, 0x3b, 0x91, 0xa6, 0x21, 0x9e, 0x2a,
	0x83, 0x3f, 0xfa, 0x98, 0x8d, 0xca, 0xe2, 0xc5, 0x3a, 0xfb, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x30,
	0xdf, 0x8d, 0xb4, 0xe8, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	CrossChainTransfer(ctx context.Context, in *MsgCrossChainTransfer, opts ...grpc.CallOption) (*MsgCrossChainTransferResponse, error)
	CreateTrx(ctx context.Context, in *MsgCreateTrx, opts ...grpc.CallOption) (*MsgCreateTrxResponse, error)
	UpdateTrx(ctx context.Context, in *MsgUpdateTrx, opts ...grpc.CallOption) (*MsgUpdateTrxResponse, error)
	DeleteTrx(ctx context.Context, in *MsgDeleteTrx, opts ...grpc.CallOption) (*MsgDeleteTrxResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CrossChainTransfer(ctx context.Context, in *MsgCrossChainTransfer, opts ...grpc.CallOption) (*MsgCrossChainTransferResponse, error) {
	out := new(MsgCrossChainTransferResponse)
	err := c.cc.Invoke(ctx, "/pchainorg.pibridge.trx.Msg/CrossChainTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTrx(ctx context.Context, in *MsgCreateTrx, opts ...grpc.CallOption) (*MsgCreateTrxResponse, error) {
	out := new(MsgCreateTrxResponse)
	err := c.cc.Invoke(ctx, "/pchainorg.pibridge.trx.Msg/CreateTrx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTrx(ctx context.Context, in *MsgUpdateTrx, opts ...grpc.CallOption) (*MsgUpdateTrxResponse, error) {
	out := new(MsgUpdateTrxResponse)
	err := c.cc.Invoke(ctx, "/pchainorg.pibridge.trx.Msg/UpdateTrx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteTrx(ctx context.Context, in *MsgDeleteTrx, opts ...grpc.CallOption) (*MsgDeleteTrxResponse, error) {
	out := new(MsgDeleteTrxResponse)
	err := c.cc.Invoke(ctx, "/pchainorg.pibridge.trx.Msg/DeleteTrx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	CrossChainTransfer(context.Context, *MsgCrossChainTransfer) (*MsgCrossChainTransferResponse, error)
	CreateTrx(context.Context, *MsgCreateTrx) (*MsgCreateTrxResponse, error)
	UpdateTrx(context.Context, *MsgUpdateTrx) (*MsgUpdateTrxResponse, error)
	DeleteTrx(context.Context, *MsgDeleteTrx) (*MsgDeleteTrxResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CrossChainTransfer(ctx context.Context, req *MsgCrossChainTransfer) (*MsgCrossChainTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainTransfer not implemented")
}
func (*UnimplementedMsgServer) CreateTrx(ctx context.Context, req *MsgCreateTrx) (*MsgCreateTrxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrx not implemented")
}
func (*UnimplementedMsgServer) UpdateTrx(ctx context.Context, req *MsgUpdateTrx) (*MsgUpdateTrxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrx not implemented")
}
func (*UnimplementedMsgServer) DeleteTrx(ctx context.Context, req *MsgDeleteTrx) (*MsgDeleteTrxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrx not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CrossChainTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCrossChainTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CrossChainTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pchainorg.pibridge.trx.Msg/CrossChainTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CrossChainTransfer(ctx, req.(*MsgCrossChainTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTrx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pchainorg.pibridge.trx.Msg/CreateTrx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTrx(ctx, req.(*MsgCreateTrx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTrx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pchainorg.pibridge.trx.Msg/UpdateTrx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTrx(ctx, req.(*MsgUpdateTrx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteTrx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pchainorg.pibridge.trx.Msg/DeleteTrx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteTrx(ctx, req.(*MsgDeleteTrx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pchainorg.pibridge.trx.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrossChainTransfer",
			Handler:    _Msg_CrossChainTransfer_Handler,
		},
		{
			MethodName: "CreateTrx",
			Handler:    _Msg_CreateTrx_Handler,
		},
		{
			MethodName: "UpdateTrx",
			Handler:    _Msg_UpdateTrx_Handler,
		},
		{
			MethodName: "DeleteTrx",
			Handler:    _Msg_DeleteTrx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trx/tx.proto",
}

func (m *MsgCrossChainTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrossChainTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrossChainTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToChain) > 0 {
		i -= len(m.ToChain)
		copy(dAtA[i:], m.ToChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToChain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FromChain) > 0 {
		i -= len(m.FromChain)
		copy(dAtA[i:], m.FromChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromChain)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCrossChainTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrossChainTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrossChainTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTrx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTrx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTrx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrossChainMsgs) > 0 {
		i -= len(m.CrossChainMsgs)
		copy(dAtA[i:], m.CrossChainMsgs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrossChainMsgs)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChainID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTrxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTrxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTrxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTrx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTrx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTrx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrossChainMsgs) > 0 {
		i -= len(m.CrossChainMsgs)
		copy(dAtA[i:], m.CrossChainMsgs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrossChainMsgs)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChainID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTrxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTrxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTrxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTrx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTrx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTrx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTrxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTrxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTrxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCrossChainTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.FromChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCrossChainTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTrx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainID != 0 {
		n += 1 + sovTx(uint64(m.ChainID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrossChainMsgs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTrxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTrx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainID != 0 {
		n += 1 + sovTx(uint64(m.ChainID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrossChainMsgs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTrxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteTrx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteTrxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCrossChainTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrossChainTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrossChainTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrossChainTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrossChainTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrossChainTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTrx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTrx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTrx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainMsgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainMsgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTrxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTrxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTrxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTrx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTrx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTrx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainMsgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainMsgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTrxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTrxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTrxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTrx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTrx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTrx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTrxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTrxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTrxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
